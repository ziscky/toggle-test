// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	uuid "github.com/google/uuid"

	models "github.com/ziscky/toggle-test/internal/models"
)

// PersistInterface is an autogenerated mock type for the PersistInterface type
type PersistInterface struct {
	mock.Mock
}

// CreateCards provides a mock function with given fields: ctx, cards
func (_m *PersistInterface) CreateCards(ctx context.Context, cards []models.Card) error {
	ret := _m.Called(ctx, cards)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Card) error); ok {
		r0 = rf(ctx, cards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDeck provides a mock function with given fields: ctx, shuffled, cards
func (_m *PersistInterface) CreateDeck(ctx context.Context, shuffled bool, cards []models.Card) (*models.Deck, error) {
	ret := _m.Called(ctx, shuffled, cards)

	var r0 *models.Deck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, []models.Card) (*models.Deck, error)); ok {
		return rf(ctx, shuffled, cards)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, []models.Card) *models.Deck); ok {
		r0 = rf(ctx, shuffled, cards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, []models.Card) error); ok {
		r1 = rf(ctx, shuffled, cards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, codes
func (_m *PersistInterface) GetCards(ctx context.Context, codes []string) ([]models.Card, error) {
	ret := _m.Called(ctx, codes)

	var r0 []models.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.Card, error)); ok {
		return rf(ctx, codes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.Card); ok {
		r0 = rf(ctx, codes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, codes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeckByID provides a mock function with given fields: ctx, id
func (_m *PersistInterface) GetDeckByID(ctx context.Context, id uuid.UUID) (*models.Deck, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Deck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Deck, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Deck); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeck provides a mock function with given fields: ctx, deck
func (_m *PersistInterface) UpdateDeck(ctx context.Context, deck *models.Deck) error {
	ret := _m.Called(ctx, deck)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Deck) error); ok {
		r0 = rf(ctx, deck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeckCardStatus provides a mock function with given fields: ctx, deckID, cards, status
func (_m *PersistInterface) UpdateDeckCardStatus(ctx context.Context, deckID uuid.UUID, cards []models.Card, status models.CardStatus) error {
	ret := _m.Called(ctx, deckID, cards, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []models.Card, models.CardStatus) error); ok {
		r0 = rf(ctx, deckID, cards, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPersistInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPersistInterface creates a new instance of PersistInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersistInterface(t mockConstructorTestingTNewPersistInterface) *PersistInterface {
	mock := &PersistInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
